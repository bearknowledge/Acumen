import { useEffect, useState } from "react";
import { Wallet, BN, bn } from "fuels";
import "./App.css";

// Import the contract factory from the folder generated by the fuelchain
// command
import  {AcumenAbi__factory} from "./contracts/factories/AcumenAbi__factory";

// The private key of the `owner` in chainConfig.json.
// This enables us to have an account with an initial balance.
const WALLET_SECRET =
  "2ef4b3f83de6d32c9e31c796e3175fc48eeb875d9824782d7b8d56db8a87ef2f";

// The ID of the contract deployed to our local node.
// The contract ID is displayed when the `forc deploy` command is run.
// E.g. Contract id: 0xa326e3472fd4abc417ba43e369f59ea44f8325d42ba6cf71ec4b58123fd8668a
// const CONTRACT_ID = "0xa326e3472fd4abc417ba43e369f59ea44f8325d42ba6cf71ec4b58123fd8668a"
const CONTRACT_ID =
  "0xf6fd79d500dadb57f8cf249a493b6b7d43b22b806e61da45b8b638ca9b5b4a44";

// Create a "Wallet" using the private key above.
const wallet1 = Wallet.fromPrivateKey(
  WALLET_SECRET,
  "https://node-beta-2.fuel.network/graphql"
);

// Connect a "Contract" instance using the ID of the deployed contract and the
// wallet above.

const contract = AcumenAbi__factory.connect(CONTRACT_ID, wallet1);
const address =
  "0x0000000000000000000000000000000000000000000000000000000000000000";

function App() {
  const checkBal = async () => {
    console.log(
      Number(
        await wallet1.getBalance(
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        )
      )
    );
  };
  // useEffect(() => {
  //   async function main() {
  //     // Executes the `counter()` function to query the current contract state.
  //     // the `.get()` method is read-only. Therefore, doesn't spend coins.
  //     const { value } = await contract.functions.deposit();
  //     setCounter(Number(value));
  //   }
  //   main();
  // }, []);

  async function deposit(e: any) {
    e.preventDefault();
    const data = new FormData(e.target);
    const deposit = await contract.functions
      .deposit(bn(String(data.get("PoolID"))), bn(String(data.get("Amount"))))
      .txParams({ gasPrice: 1 })
      .callParams({ forward: [bn(String(data.get("Amount"))), address] })
      .call();

    console.log("transaction", deposit);
  }

  async function createPool(e:any)  {
    e.preventDefault();
    const data = new FormData(e.target);
    let qrtPayout: boolean;
    let isStaking: boolean;

    if (data.get("qrtPayout") === "yes") {
      qrtPayout = true;
    } else {
      qrtPayout = false;
    }

    if (data.get("staking") === "yes") {
      isStaking = true;
    } else {
      isStaking = false;
    }

    const poolId = await contract.functions
      .create_pool(
        isStaking,
        String(data.get("poolName")),
        new BN(Number(data.get("apy"))),
        qrtPayout,
        new BN(Number(data.get("duration"))),
        new BN(Number(data.get("startTime"))),
        new BN(Number(data.get("endTime"))),
        new BN(Number(data.get("maxUtilization"))),
        bn.parseUnits(String(data.get("capacity"))),
        new BN(Number(data.get("limitPerPerson")))
      )
      .txParams({ gasPrice: 1 })
      .call();

    console.log("Sent to the chain", poolId);
  }
  const [pools, setPools] = useState(0);

  async function allPools() {
    const { value } = await contract.functions.get_total_pools().get();
    console.log(Number(value));
    setPools(Number(value));
  }

  async function poolDetails() {
    const value1 = await contract.functions.get_pool_info_from_id(0).get();
    const { value } = value1;
    console.log(value);
  }

  async function userDetails() {
    const value1 = await contract.functions.get_total_stakes_of_user(0).get();
    // const {value} = value1;
    console.log(value1);
  }

  async function editPool(e:any) {
    e.preventDefault();
    let paused: boolean;
    const data = new FormData(e.target);
    if (data.get("paused") === "yes") {
      paused = true;
    } else {
      paused = false;
    }

    const apple = await contract.functions
      .edit_pool(
        Number(data.get("poolId")),
        String(data.get("poolName")),
        paused,
        new BN(Number(data.get("apy"))),
        new BN(Number(data.get("maxUtilization"))),
        new BN(Number(data.get("capacity")))
      )
      .txParams({ gasPrice: 1 })
      .call();
    console.log(apple);
  }

  useEffect(() => {
    allPools();
    checkBal();
    poolDetails();
    // userDetails();
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <div className="App-items">
          <p>Deposit</p>
          <form onSubmit={deposit}>
            <input name="PoolID" className="" placeholder="PoolID"></input>
            <input
              name="Amount"
              className=""
              placeholder="Amount"
              step=".001"
            ></input>
            <button type="submit">Submit</button>
          </form>
        </div>

        <div className="App-items">
          <p>Withdraw</p>
          <input className=""></input>
          <button type="submit">Submit</button>
        </div>

        <div className="App-items">
          <p>Borrow</p>
          <input className=""></input>
          <button type="submit">Submit</button>
        </div>

        <div className="App-items">
          <p>Repay</p>
          <input className=""></input>
          <button type="submit">Submit</button>
        </div>

        <div className="App-items">
          <p>Create Pool: {pools}</p>
          <form onSubmit={createPool} className="Input">
            <p>Yes is Left, No is Right</p>
            <span>
              Staking?
              <input
                name="staking"
                value="yes"
                type="radio"
                className="App-inputs"
              ></input>{" "}
              <input
                name="staking"
                value="no"
                type="radio"
                className="App-inputs"
              ></input>
            </span>
            <input
              name="poolName"
              placeholder="Name"
              className="App-inputs"
            ></input>
            <input name="apy" placeholder="apy" className="App-inputs"></input>
            <span>
              qrtPayout
              <input
                name="qrtPayout"
                value="yes"
                type="radio"
                className="App-inputs"
              ></input>
              <input
                name="qrtPayout"
                value="no"
                type="radio"
                className="App-inputs"
              ></input>
            </span>
            <input
              name="duration"
              placeholder="duration"
              className="App-inputs"
            ></input>
            <input
              name="startTime"
              placeholder="startTime"
              className="App-inputs"
            ></input>
            <input
              name="endTime"
              placeholder="endTime"
              className="App-inputs"
            ></input>
            <input
              name="maxUtilization"
              placeholder="Max Utilization"
              className="App-inputs"
            ></input>
            <input
              name="capacity"
              placeholder="capacity"
              className="App-inputs"
            ></input>
            <input
              name="limitPerPerson"
              placeholder="Limit Per Person"
              className="App-inputs"
            ></input>

            <button className="App-inputs" type="submit">
              Submit
            </button>
          </form>
        </div>

        <div className="App-items">
          <p>Edit Pool</p>
          <form onSubmit={editPool} className="Input">
            <input
              className="App-inputs"
              name="poolId"
              placeholder="pool_id"
            ></input>
            <input
              className="App-inputs"
              name="poolName"
              placeholder="pool_name"
            ></input>
            <span>
              paused
              <input
                name="paused"
                value="yes"
                type="radio"
                className="App-inputs"
              ></input>
              <input
                name="paused"
                value="no"
                type="radio"
                className="App-inputs"
              ></input>
            </span>
            <input className="App-inputs" name="apy" placeholder="apy"></input>
            <input
              className="App-inputs"
              name="maxUtilization"
              placeholder="max_utilization"
            ></input>
            <input
              className="App-inputs"
              name="capacity"
              placeholder="capacity"
            ></input>
            <button className="App-inputs" type="submit">
              Submit
            </button>
          </form>
        </div>
      </header>
    </div>
  );
}

export default App;




